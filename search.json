[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2019 Lluís Revilla Sancho Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/inteRmodel.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"inteRmodel","text":"goal inteRmodel provide tools required search models generalized canonical correlations provided RGCCA package. can read canonical correlation (Tenenhaus Tenenhaus 2011). use case want find best model relate gene expression glioma repetitions DNA level, taking account tumors three different locations. idea location might influence tumor.","code":"library(inteRmodel)"},{"path":"/articles/inteRmodel.html","id":"data-format","dir":"Articles","previous_headings":"","what":"Data format","title":"inteRmodel","text":"use data used vignette RGCCA package. need samples rows variables columns: steps read prepare data sgcca rgcca function.","code":"data(\"ge_cgh_locIGR\") A <- ge_cgh_locIGR$multiblocks Loc <- factor(ge_cgh_locIGR$y) levels(Loc) <- colnames(ge_cgh_locIGR$multiblocks$y) A[[3]] = A[[3]][, -3] names(A)[3] <- \"Loc\""},{"path":"/articles/inteRmodel.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"inteRmodel","text":"workflow follows: Selecting interaction-model Evaluation models Tuning weight different interaction models Comparison different models bootstrapping steps explained detail next sections.","code":""},{"path":"/articles/inteRmodel.html","id":"null-hypothesis","dir":"Articles","previous_headings":"3 Workflow","what":"Null hypothesis","title":"inteRmodel","text":"need encode hypothesis model, takes shape matrix. ease design model several functions available. important one subSymm, makes substitutions symmetric matrices. hypothesize Agriculture industry linked agriculture linked political block.","code":"C <- matrix(0, nrow = 3, ncol = 3, dimnames = list(names(A), names(A))) model0 <- subSymm(C, \"GE\", \"CGH\", 1) model0 <- subSymm(model0, \"GE\", \"Loc\", 1) model0 #>     GE CGH Loc #> GE   0   1   1 #> CGH  1   0   0 #> Loc  1   0   0"},{"path":"/articles/inteRmodel.html","id":"search-models","dir":"Articles","previous_headings":"3 Workflow","what":"Search models","title":"inteRmodel","text":"Now look model best relates data. quickly explores 20 different models best ones. can see hypothesis upper middle: Figure 1: Histogram different inner AVE values model. According , better model : model instead expected relation Agriculture Industry block, related Political block.","code":"out_model <- search_model(A = A, c1 = c(.071, .2, 1), scheme = \"horst\",                scale = FALSE, verbose = FALSE,                ncomp = rep(1, length(A)),                bias = TRUE) columns <- grep(\"var\", colnames(out_model)) model <- symm(C, out_model[which.max(out_model$AVE_inner), columns]) model #>     GE CGH Loc #> GE   0 0.0 1.0 #> CGH  0 0.0 0.5 #> Loc  1 0.5 0.0"},{"path":"/articles/inteRmodel.html","id":"refinement-of-the-model","dir":"Articles","previous_headings":"3 Workflow","what":"Refinement of the model","title":"inteRmodel","text":"explore relationships model: can see usually model around 0.4 inner AVE. Figure 2: Histogram different inner AVE values model different weights connections. best model :","code":"out_best <- iterate_model(C = model, A = A, c1 = c(.071,.2, 1),                            scheme = \"horst\",                           scale = FALSE, verbose = FALSE,                           ncomp = rep(1, length(A)),                           bias = TRUE) model2 <- symm(C, out_best[which.max(out_best$AVE_inner), columns]) model2 #>     GE CGH Loc #> GE   0 0.0 1.0 #> CGH  0 0.0 0.1 #> Loc  1 0.1 0.0"},{"path":"/articles/inteRmodel.html","id":"evaluate-stability","dir":"Articles","previous_headings":"3 Workflow","what":"Evaluate stability","title":"inteRmodel","text":"next step see models better others, something along lines iterations.","code":"index <- boot_index(nrow(A[[1]]), 10) bs0 <- boot_index_sgcca(index, A = A, C = model0, c1 = c(.071,.2, 1)) bs1 <- boot_index_sgcca(index, A = A, C = model, c1 = c(.071,.2, 1)) bs2 <- boot_index_sgcca(index, A = A, C = model2, c1 = c(.071,.2, 1))"},{"path":"/articles/inteRmodel.html","id":"stability","dir":"Articles","previous_headings":"3 Workflow > 3.4 Evaluate stability","what":"Stability","title":"inteRmodel","text":"can see different distributions: Figure 3: Comparison models, null hypothesis along model higest inner AVE. Triangles show centroid group suggests model2 higher inner AVE model0. iterations see tendency model centered others. , indicating model can better find relationship blocks regardless input data.","code":"plot(c(0.6, 0.9), c(0.05, 0.15), type = \"n\", xlab = \"inner AVE\", ylab = \"outer AVE\",      main = \"Bootstrap of models\") points(bs0$AVE, pch = 16, col = \"red\") points(bs1$AVE, pch = 16, col = \"green\") points(bs2$AVE, pch = 16) legend(\"topright\", legend = c(\"model2\", \"model\", \"model0\"),         fill = c(\"black\", \"green\", \"red\"))  df <- rbind(   cbind.data.frame(bs0$AVE, Model = \"model 0\"),   cbind.data.frame(bs1$AVE, Model = \"model 1\"),   cbind.data.frame(bs2$AVE, Model = \"model 2\")) agg <- aggregate(df[, 1:2], list(Model = df$Model), mean) points(agg[, 2:3], pch = 17, col = c(\"red\", \"green\", \"black\"), cex = 1.5)"},{"path":"/articles/inteRmodel.html","id":"features","dir":"Articles","previous_headings":"3 Workflow > 3.4 Evaluate stability","what":"Features","title":"inteRmodel","text":"can now analyze canonical correlation weight variable. can now explore position sample: Figure 4: Differences canonical dimensions samples Although relative difference general outcome, changed importance variable. can see : Figure 5: Comparison weights CGH variables variables weight 0 model 0 become important variables important longer weight model 2.","code":"m2 <- RGCCA::sgcca(A, model2, c1 = c(.071,.2, 1), scheme = \"horst\",                scale = TRUE, verbose = FALSE, ncomp = rep(1, length(A)),                bias = TRUE) m0 <- RGCCA::sgcca(A, model0, c1 = c(.071,.2, 1), scheme = \"horst\",                scale = TRUE, verbose = FALSE, ncomp = rep(1, length(A)),                bias = TRUE) pars <- par(mfrow = c(1, 2)) plot(m0$Y[[1]][, 1], m0$Y[[2]][, 1], type = \"n\", xlab = \"Block1 Comp1\",       ylab = \"Block2 Comp1\", main = \"Initial model\") abline(h = 0, v = 0) text(m0$Y[[1]][, 1], m0$Y[[2]][, 1], labels = Loc, col = as.numeric(Loc) + 1)  plot(m2$Y[[1]][, 1], m2$Y[[2]][, 1], type = \"n\", xlab = \"Block1 Comp1\",       ylab = \"Block2 Comp1\", main = \"Final model\") abline(h = 0, v = 0) text(m2$Y[[1]][, 1], m2$Y[[2]][, 1], labels = Loc, col = as.numeric(Loc) + 1) par(pars) plot(m0$a$CGH[, 1], m2$a$CGH[, 1], main = \"CGH variables importance\",       xlab = \"model0\", ylab = \"model2\", pch = 16)"},{"path":"/articles/inteRmodel.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"inteRmodel","text":"Finding different model explains data better challenges assumptions data. comparing models, can learn blocks variables connected thus showing new relationships. new relationships consider variables different importance, , right model, accurate.","code":""},{"path":"/articles/inteRmodel.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"inteRmodel","text":"","code":"sessionInfo() #> R version 4.1.2 (2021-11-01) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] inteRmodel_0.1.1.9001 #>  #> loaded via a namespace (and not attached): #>  [1] knitr_1.37          magrittr_2.0.2      MASS_7.3-55         #>  [4] BiocParallel_1.28.3 lattice_0.20-45     R6_2.5.1            #>  [7] rlang_1.0.1         fastmap_1.1.0       stringr_1.4.0       #> [10] highr_0.9           tools_4.1.2         parallel_4.1.2      #> [13] grid_4.1.2          xfun_0.29           RGCCA_2.1.2         #> [16] cli_3.1.1           jquerylib_0.1.4     htmltools_0.5.2     #> [19] yaml_2.2.2          digest_0.6.29       Matrix_1.4-0        #> [22] sass_0.4.0          evaluate_0.14       rmarkdown_2.11      #> [25] stringi_1.7.6       compiler_4.1.2      bslib_0.3.1         #> [28] jsonlite_1.7.3"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lluís Revilla Sancho. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Revilla Sancho L (2022). inteRmodel: Find Models Interaction. R package version 0.1.1.9001, https://github.com/llrs/inteRmodel.","code":"@Manual{,   title = {inteRmodel: Find Models of Interaction},   author = {Lluís {Revilla Sancho}},   year = {2022},   note = {R package version 0.1.1.9001},   url = {https://github.com/llrs/inteRmodel}, }"},{"path":"/index.html","id":"intermodel","dir":"","previous_headings":"","what":"Find Models of Interaction","title":"Find Models of Interaction","text":"goal inteRmodel help interaction models using RGCCA asses stability model best model possible given data provided. package assumes blocks connected. can apply bootstraping models search_model, iterate_model bootstrap samples boot_samples_sgcca boot_index_sgcca. information regularized canonical correlations interpretation read RGCCA vignette associated articles. CRAN version slow try fork dependencies much faster.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Find Models of Interaction","text":"can install released version inteRmodel Github :","code":"devtools::install_github(\"llrs/inteRmodel\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Find Models of Interaction","text":"basic example shows apply bootstraping analysis: can see AVE bootstraps using: AVE scores bootstrap sample, help decide stability model. See vignette full example.","code":"library(inteRmodel) data(\"Russett\", package = \"RGCCA\") X_agric <- as.matrix(Russett[, c(\"gini\", \"farm\", \"rent\")]) X_ind <- as.matrix(Russett[, c(\"gnpr\", \"labo\")]) X_polit <- as.matrix(Russett[ , c(\"inst\", \"ecks\",  \"death\", \"demostab\",                                   \"dictator\")]) A <- list(X_agric, X_ind, X_polit) set.seed(879138) boots <- 10 C <- matrix(c(0, 0, 1, 0, 0, 1, 1, 1, 0), 3, 3) boot_i <- boot_samples_sgcca(A = A, C = C, c1 = rep(1, 3), nb_boot = boots) head(boot_i$AVE) #>          inner     outer #> [1,] 0.3003373 0.6522110 #> [2,] 0.3871677 0.6821278 #> [3,] 0.4648659 0.6416236 #> [4,] 0.4732215 0.7039174 #> [5,] 0.4903151 0.6333550 #> [6,] 0.3474681 0.6248818"},{"path":"/reference/analyze.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze a sgcca object — analyze","title":"Analyze a sgcca object — analyze","text":"Performs calculations output sgcca make easier retrieve information result.","code":""},{"path":"/reference/analyze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze a sgcca object — analyze","text":"","code":"analyze(sgcca)"},{"path":"/reference/analyze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze a sgcca object — analyze","text":"sgcca SGCCA object RGCCA package","code":""},{"path":"/reference/analyze.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze a sgcca object — analyze","text":"vector correlation components, AVE (inner outer), canonical correlation, weight design matrix, number interactions exists.","code":""},{"path":"/reference/analyze.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze a sgcca object — analyze","text":"Calculates correlations canonical dimensions, calculates canonical correlations, returns also weight link model used, tidy way.","code":""},{"path":"/reference/analyze.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze a sgcca object — analyze","text":"","code":"data(\"Russett\", package = \"RGCCA\") X_agric <- as.matrix(Russett[, c(\"gini\", \"farm\", \"rent\")]) X_ind <- as.matrix(Russett[, c(\"gnpr\", \"labo\")]) X_polit <- as.matrix(Russett[ , c(\"inst\", \"ecks\",  \"death\", \"demostab\",                                   \"dictator\")]) A <- list(X_agric, X_ind, X_polit) A <- lapply(A, function(x) scale2(x, bias = TRUE)) C <- matrix(c(0, 0, 1, 0, 0, 1, 1, 1, 0), 3, 3) out <- RGCCA::rgcca(A, C, tau =rep(0, 3), scheme = \"factorial\",                     scale = FALSE, verbose = TRUE) #> Computation of the RGCCA block components based on the factorial scheme  #> Shrinkage intensity paramaters are chosen manually  #>  Iter:    1  Fit: 1.83005079  Dif:  0.38803933  #>  Iter:    2  Fit: 1.92003517  Dif:  0.08998438  #>  Iter:    3  Fit: 1.93192442  Dif:  0.01188925  #>  Iter:    4  Fit: 1.93354278  Dif:  0.00161836  #>  Iter:    5  Fit: 1.93376871  Dif:  0.00022593  #>  Iter:    6  Fit: 1.93380060  Dif:  0.00003189  #>  Iter:    7  Fit: 1.93380512  Dif:  0.00000452  #>  Iter:    8  Fit: 1.93380576  Dif:  0.00000064  #>  Iter:    9  Fit: 1.93380585  Dif:  0.00000009  #>  Iter:   10  Fit: 1.93380586  Dif:  0.00000001  #>  Iter:   11  Fit: 1.93380586  Dif:  0.00000000  #> The RGCCA algorithm converged to a stationary point after 10 iterations   analyze(out) #>       vs12       vs13       vs23  AVE_inner  AVE_outer        cc1      var12  #>  0.4875286 -0.6270914 -0.7574030  0.4834515  0.4793766  0.9669029  0.0000000  #>      var13      var23    weights  #>  1.0000000  1.0000000  2.0000000"},{"path":"/reference/aves.html","id":null,"dir":"Reference","previous_headings":"","what":"Method to simplify AVE — aves","title":"Method to simplify AVE — aves","text":"simplifies AVE_X make easier understand.","code":""},{"path":"/reference/aves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method to simplify AVE — aves","text":"","code":"aves(x)"},{"path":"/reference/aves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method to simplify AVE — aves","text":"x rgcca sgcca object","code":""},{"path":"/reference/aves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method to simplify AVE — aves","text":"object AVE_X simplified","code":""},{"path":"/reference/aves.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method to simplify AVE — aves","text":"converts matrix row dimension column block.","code":""},{"path":"/reference/aves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method to simplify AVE — aves","text":"","code":"data(\"Russett\", package = \"RGCCA\") X_agric <- as.matrix(Russett[, c(\"gini\", \"farm\", \"rent\")]) X_ind <- as.matrix(Russett[, c(\"gnpr\", \"labo\")]) X_polit <- as.matrix(Russett[ , c(\"inst\", \"ecks\",  \"death\", \"demostab\",                                   \"dictator\")]) A <- list(X_agric, X_ind, X_polit) A <- lapply(A, function(x) scale2(x, bias = TRUE)) C <- matrix(c(0, 0, 1, 0, 0, 1, 1, 1, 0), 3, 3) out <- RGCCA::rgcca(A, C, tau =rep(0, 3), scheme = \"factorial\",                     scale = FALSE, verbose = FALSE, ncomp = rep(2, length(A))) out$AVE #> $AVE_X #> $AVE_X[[1]] #>     comp1     comp2  #> 0.2696404 0.5907840  #>  #> $AVE_X[[2]] #>     comp1     comp2  #> 0.8956496 0.1043504  #>  #> $AVE_X[[3]] #>     comp1     comp2  #> 0.4387091 0.1647263  #>  #>  #> $AVE_outer_model #> [1] 0.4793766 0.2804684 #>  #> $AVE_inner_model #> [1] 0.4834515 0.1338607 #>  out <- aves(out) out$AVE #> $AVE_X #>            [,1]      [,2]      [,3] #> comp1 0.2696404 0.8956496 0.4387091 #> comp2 0.5907840 0.1043504 0.1647263 #>  #> $AVE_outer_model #> [1] 0.4793766 0.2804684 #>  #> $AVE_inner_model #> [1] 0.4834515 0.1338607 #>"},{"path":"/reference/boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap sgcca — boot_samples_sgcca","title":"Bootstrap sgcca — boot_samples_sgcca","text":"Function perform bootstrap samples. boot_samples_sgcca bootstrap given original data, boot_index_sgcca() given index samples iterates .","code":""},{"path":"/reference/boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap sgcca — boot_samples_sgcca","text":"","code":"boot_samples_sgcca(..., nb_boot = 1000, verbose = TRUE)  boot_index_sgcca(index, ..., BPPARAM = BiocParallel::SerialParam())"},{"path":"/reference/boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap sgcca — boot_samples_sgcca","text":"... Named arguments passed sgcca. nb_boot Number bootstraps perform. verbose Logical, print progress bar (default) ? index list numeric values selecting values BPPARAM Set parallel backend (see BiocParallel documentation).","code":""},{"path":"/reference/boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap sgcca — boot_samples_sgcca","text":"list two elements: coefficient variable input blocks; AVE values, inner, outer","code":""},{"path":"/reference/boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap sgcca — boot_samples_sgcca","text":"boot_index_sgcca Iterate index, list vectors position samples use use sgcca arguments provided. boot_samples_sgcca Iterate random samples without recording samples used.","code":""},{"path":"/reference/boot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bootstrap sgcca — boot_samples_sgcca","text":"Recommended provide scaled data argument scale = FALSE","code":""},{"path":[]},{"path":"/reference/boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap sgcca — boot_samples_sgcca","text":"","code":"data(\"Russett\", package = \"RGCCA\") X_agric <- as.matrix(Russett[, c(\"gini\", \"farm\", \"rent\")]) X_ind <- as.matrix(Russett[, c(\"gnpr\", \"labo\")]) X_polit <- as.matrix(Russett[ , c(\"inst\", \"ecks\",  \"death\", \"demostab\",                                   \"dictator\")]) A <- list(X_agric, X_ind, X_polit) C <- matrix(c(0, 0, 1, 0, 0, 1, 1, 1, 0), 3, 3) out <- boot_samples_sgcca(A = A, C = C, c1 = rep(1, 3),  nb_boot = 10) #>    |                                                                               |                                                                      |   0%   |                                                                               |=======                                                               |  10%   |                                                                               |==============                                                        |  20%   |                                                                               |=====================                                                 |  30%   |                                                                               |============================                                          |  40%   |                                                                               |===================================                                   |  50%   |                                                                               |==========================================                            |  60%   |                                                                               |=================================================                     |  70%   |                                                                               |========================================================              |  80%   |                                                                               |===============================================================       |  90%   |                                                                               |======================================================================| 100% head(out$AVE) #>          inner     outer #> [1,] 0.4070022 0.6627912 #> [2,] 0.4156261 0.6850355 #> [3,] 0.4597457 0.7224967 #> [4,] 0.3194253 0.6372699 #> [5,] 0.5276837 0.6621039 #> [6,] 0.2974076 0.5991471 boots <- 10 index <- boot_index(nrow(A[[1]]), boots) boot_i <- boot_index_sgcca(index, A = A, C = C)"},{"path":"/reference/boot_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Explore multiple designs — boot_design","title":"Explore multiple designs — boot_design","text":"Explore multiple designs","code":""},{"path":"/reference/boot_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explore multiple designs — boot_design","text":"","code":"boot_design(   designs,   sample = 10000,   ...,   BPPARAM = BiocParallel::SerialParam() )"},{"path":"/reference/boot_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explore multiple designs — boot_design","text":"designs list designs obtained weight_design(). sample numeric value number samples test. ... Arguments passed boot_samples_sgcca nb_boot Number bootstraps perform. verbose Logical, print progress bar (default) ? BPPARAM Set parallel backend (see BiocParallel documentation).","code":""},{"path":"/reference/boot_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explore multiple designs — boot_design","text":"data.frame information models performance.","code":""},{"path":[]},{"path":"/reference/boot_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Create index for the samples — boot_index","title":"Create index for the samples — boot_index","text":"Helper function easy creation index bootstrap. element number samples.","code":""},{"path":"/reference/boot_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create index for the samples — boot_index","text":"","code":"boot_index(samples, boots)"},{"path":"/reference/boot_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create index for the samples — boot_index","text":"samples numeric value samples. boots numeric value bootstraps want.","code":""},{"path":"/reference/boot_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create index for the samples — boot_index","text":"list length boots indices samples.","code":""},{"path":[]},{"path":"/reference/boot_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create index for the samples — boot_index","text":"","code":"boot_index(10, 3) #> [[1]] #>  [1]  1  2 10 10  5  7  7  2  8  8 #>  #> [[2]] #>  [1]  3  9 10  7 10  1  2  2  4  1 #>  #> [[3]] #>  [1]  4  8  4  6  4  2  7 10  9  2 #>"},{"path":"/reference/cca_rgcca.html","id":null,"dir":"Reference","previous_headings":"","what":"Canonical correlations and covariates — cca_rgcca","title":"Canonical correlations and covariates — cca_rgcca","text":"Calculates canonical correlation canonical covariates.","code":""},{"path":"/reference/cca_rgcca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Canonical correlations and covariates — cca_rgcca","text":"","code":"cca_rgcca(rgcca)"},{"path":"/reference/cca_rgcca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Canonical correlations and covariates — cca_rgcca","text":"rgcca output SGCCA RGCCA","code":""},{"path":"/reference/cca_rgcca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Canonical correlations and covariates — cca_rgcca","text":"data.frame correlation covariation CCA components","code":""},{"path":"/reference/cca_rgcca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Canonical correlations and covariates — cca_rgcca","text":"","code":"data(\"Russett\", package = \"RGCCA\") X_agric <- as.matrix(Russett[, c(\"gini\", \"farm\", \"rent\")]) X_ind <- as.matrix(Russett[, c(\"gnpr\", \"labo\")]) X_polit <- as.matrix(Russett[ , c(\"inst\", \"ecks\",  \"death\", \"demostab\",                                   \"dictator\")]) A <- list(X_agric, X_ind, X_polit) A <- lapply(A, function(x) scale2(x, bias = TRUE)) C <- matrix(c(0, 0, 1, 0, 0, 1, 1, 1, 0), 3, 3) out <- RGCCA::rgcca(A, C, tau =rep(0, 3), scheme = \"factorial\",                     scale = FALSE, verbose = FALSE, ncomp = rep(2, length(A))) out <- improve(out, c(\"Agric\", \"Ind\", \"Polit\")) ccas <- cca_rgcca(out)"},{"path":"/reference/correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the design is fully connected — correct","title":"Check that the design is fully connected — correct","text":"Given design matrix, checks blocks connected . Without leaving block connected blocks isolated others.","code":""},{"path":"/reference/correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the design is fully connected — correct","text":"","code":"correct(x)"},{"path":"/reference/correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the design is fully connected — correct","text":"x Design matrix, symmetric matrix weights 0 1.","code":""},{"path":"/reference/correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that the design is fully connected — correct","text":"logical value fully connected .","code":""},{"path":"/reference/correct.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check that the design is fully connected — correct","text":"See question answer done: https://math.stackexchange.com//551947","code":""},{"path":"/reference/correct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that the design is fully connected — correct","text":"","code":"C <- matrix(0, nrow = 4, ncol = 4, dimnames = list(LETTERS[1:4], LETTERS[1:4])) (m1 <- subSymm(C, 1, 2, 1)) #>   A B C D #> A 0 1 0 0 #> B 1 0 0 0 #> C 0 0 0 0 #> D 0 0 0 0 correct(m1) # Several blocks wouldn't be connected #> [1] FALSE (m2 <- subSymm(m1, 3, 4, 1)) #>   A B C D #> A 0 1 0 0 #> B 1 0 0 0 #> C 0 0 0 1 #> D 0 0 1 0 correct(m2) # All blocks are connected, but there are two networks. #> [1] FALSE (m3 <- subSymm(m2, 1, 4, 1)) #>   A B C D #> A 0 1 0 1 #> B 1 0 0 0 #> C 0 0 0 1 #> D 1 0 1 0 correct(m3) # All blocks are connected and there is a single network #> [1] TRUE"},{"path":"/reference/extract_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract model — extract_model","title":"Extract model — extract_model","text":"evaluated extract model.","code":""},{"path":"/reference/extract_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract model — extract_model","text":"","code":"extract_model(model, models_eval, which)"},{"path":"/reference/extract_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract model — extract_model","text":"model matrix names blocks. models_eval output iterate_model() search_model(). Either inner, outer row extract model.","code":""},{"path":"/reference/extract_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract model — extract_model","text":"matrix weights models_eval argument.","code":""},{"path":"/reference/extract_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract model — extract_model","text":"","code":"data(\"Russett\", package = \"RGCCA\") X_agric <- as.matrix(Russett[, c(\"gini\", \"farm\", \"rent\")]) X_ind <- as.matrix(Russett[, c(\"gnpr\", \"labo\")]) X_polit <- as.matrix(Russett[ , c(\"inst\", \"ecks\",  \"death\", \"demostab\",                                   \"dictator\")]) A <- list(Agric = X_agric, Ind = X_ind, Polit = X_polit) C <- matrix(c(0, 0, 1, 0, 0, 1, 1, 1, 0), 3, 3) out <- search_model(A = A, C = C, c1 =rep(1, 3), scheme = \"factorial\",                     scale = FALSE, verbose = FALSE,  ncomp = rep(1, length(A)),                     bias = TRUE, BPPARAM = BiocParallel::SerialParam()) extract_model(C, out, \"inner\") #>      [,1] [,2] [,3] #> [1,]  0.0    0  0.5 #> [2,]  0.0    0  1.0 #> [3,]  0.5    1  0.0"},{"path":"/reference/ge_cgh_locIGR.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from GE CGH and location — ge_cgh_locIGR","title":"Data from GE CGH and location — ge_cgh_locIGR","text":"data set contains list 3 dataframe. dataframe GE, CGH localization. dat 2nd version segmentation. Misclassified patients excluded segmentation re-run excluding patients (done july 2012 - C Philippe)","code":""},{"path":"/reference/ge_cgh_locIGR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from GE CGH and location — ge_cgh_locIGR","text":"","code":"data(ge_cgh_locIGR)"},{"path":"/reference/ge_cgh_locIGR.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from GE CGH and location — ge_cgh_locIGR","text":"one instance, 1 row per patient","code":""},{"path":"/reference/ge_cgh_locIGR.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from GE CGH and location — ge_cgh_locIGR","text":"IGR, Villejuif, France","code":""},{"path":"/reference/ge_cgh_locIGR.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Data from GE CGH and location — ge_cgh_locIGR","text":"data copied gliomaData package http://biodev.cea.fr/sgcca/","code":""},{"path":"/reference/ge_cgh_locIGR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Data from GE CGH and location — ge_cgh_locIGR","text":"V Frouin, 2012-07-31","code":""},{"path":"/reference/ge_cgh_locIGR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from GE CGH and location — ge_cgh_locIGR","text":"","code":"#read data data(ge_cgh_locIGR) names(ge_cgh_locIGR) #> [1] \"multiblocks\" \"ylabel\"      names(ge_cgh_locIGR$multiblocks) #> [1] \"GE\"  \"CGH\" \"y\"   class(ge_cgh_locIGR$multiblocks$GE) #> [1] \"matrix\" \"array\"  class(ge_cgh_locIGR$multiblocks$CGH) #> [1] \"matrix\" \"array\"  class(ge_cgh_locIGR$multiblocks$y) #> [1] \"matrix\" \"array\"  head(ge_cgh_locIGR$multiblocks$y) #>     cort dipg midl #> P01    0    1    0 #> P02    0    1    0 #> P03    1    0    0 #> P04    1    0    0 #> P05    1    0    0 #> P06    0    1    0 class(ge_cgh_locIGR$ylabel) #> [1] \"numeric\" # See difference between multiblock_y (a dummy variable matrix) # and ylabel a vector of labels (1, 2, 3) head(ge_cgh_locIGR$ylabel,10) #>  [1] 2 2 1 1 1 2 1 1 1 3 head(ge_cgh_locIGR$multiblocks$y,10) #>     cort dipg midl #> P01    0    1    0 #> P02    0    1    0 #> P03    1    0    0 #> P04    1    0    0 #> P05    1    0    0 #> P06    0    1    0 #> P07    1    0    0 #> P08    1    0    0 #> P09    1    0    0 #> P10    0    0    1"},{"path":"/reference/improve.html","id":null,"dir":"Reference","previous_headings":"","what":"Improve the information on sgcca classes — improve","title":"Improve the information on sgcca classes — improve","text":"Add names data returned rgcca sgcca, simplify AVE output","code":""},{"path":"/reference/improve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Improve the information on sgcca classes — improve","text":"","code":"improve(sgcca, namesA)"},{"path":"/reference/improve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Improve the information on sgcca classes — improve","text":"sgcca object class sgcca rgcca. namesA names original data","code":""},{"path":"/reference/improve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Improve the information on sgcca classes — improve","text":"object class sgcca rgcca","code":""},{"path":"/reference/improve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Improve the information on sgcca classes — improve","text":"","code":"data(\"Russett\", package = \"RGCCA\") X_agric <- as.matrix(Russett[, c(\"gini\", \"farm\", \"rent\")]) X_ind <- as.matrix(Russett[, c(\"gnpr\", \"labo\")]) X_polit <- as.matrix(Russett[ , c(\"inst\", \"ecks\",  \"death\", \"demostab\",                                   \"dictator\")]) A <- list(X_agric, X_ind, X_polit) A <- lapply(A, function(x) scale2(x, bias = TRUE)) C <- matrix(c(0, 0, 1, 0, 0, 1, 1, 1, 0), 3, 3) out <- RGCCA::rgcca(A, C, tau = rep(0, 3), scheme = \"factorial\",                     scale = FALSE, verbose = FALSE, ncomp = rep(2, length(A))) out$AVE #> $AVE_X #> $AVE_X[[1]] #>     comp1     comp2  #> 0.2696404 0.5907840  #>  #> $AVE_X[[2]] #>     comp1     comp2  #> 0.8956496 0.1043504  #>  #> $AVE_X[[3]] #>     comp1     comp2  #> 0.4387091 0.1647263  #>  #>  #> $AVE_outer_model #> [1] 0.4793766 0.2804684 #>  #> $AVE_inner_model #> [1] 0.4834515 0.1338607 #>  out <- improve(out, c(\"Agric\", \"Ind\", \"Polit\")) out$AVE #> $AVE_X #>           Agric       Ind     Polit #> comp1 0.2696404 0.8956496 0.4387091 #> comp2 0.5907840 0.1043504 0.1647263 #>  #> $AVE_outer_model #> [1] 0.4793766 0.2804684 #>  #> $AVE_inner_model #> [1] 0.4834515 0.1338607 #>"},{"path":"/reference/looIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Indexes without one sample — looIndex","title":"Indexes without one sample — looIndex","text":"Performs leave--one indexing","code":""},{"path":"/reference/looIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indexes without one sample — looIndex","text":"","code":"looIndex(size)"},{"path":"/reference/looIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indexes without one sample — looIndex","text":"size number samples","code":""},{"path":"/reference/looIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indexes without one sample — looIndex","text":"list indices one sample excluded","code":""},{"path":"/reference/looIndex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indexes without one sample — looIndex","text":"","code":"looIndex(15) #> [[1]] #>  [1]  2  3  4  5  6  7  8  9 10 11 12 13 14 15 #>  #> [[2]] #>  [1]  1  3  4  5  6  7  8  9 10 11 12 13 14 15 #>  #> [[3]] #>  [1]  1  2  4  5  6  7  8  9 10 11 12 13 14 15 #>  #> [[4]] #>  [1]  1  2  3  5  6  7  8  9 10 11 12 13 14 15 #>  #> [[5]] #>  [1]  1  2  3  4  6  7  8  9 10 11 12 13 14 15 #>  #> [[6]] #>  [1]  1  2  3  4  5  7  8  9 10 11 12 13 14 15 #>  #> [[7]] #>  [1]  1  2  3  4  5  6  8  9 10 11 12 13 14 15 #>  #> [[8]] #>  [1]  1  2  3  4  5  6  7  9 10 11 12 13 14 15 #>  #> [[9]] #>  [1]  1  2  3  4  5  6  7  8 10 11 12 13 14 15 #>  #> [[10]] #>  [1]  1  2  3  4  5  6  7  8  9 11 12 13 14 15 #>  #> [[11]] #>  [1]  1  2  3  4  5  6  7  8  9 10 12 13 14 15 #>  #> [[12]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 13 14 15 #>  #> [[13]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 14 15 #>  #> [[14]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 15 #>  #> [[15]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 #>"},{"path":"/reference/model.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions related to finding models — iterate_model","title":"Functions related to finding models — iterate_model","text":"Look every variation models changing weights 0.1.","code":""},{"path":"/reference/model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions related to finding models — iterate_model","text":"","code":"iterate_model(..., BPPARAM = BiocParallel::SerialParam())  search_model(..., nWeights = 3, BPPARAM = BiocParallel::SerialParam())"},{"path":"/reference/model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions related to finding models — iterate_model","text":"... arguments passed sggca, pass named arguments. BPPARAM Set parallel backend (see BiocParallel documentation). nWeights number weights used check possible designs.","code":""},{"path":"/reference/model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions related to finding models — iterate_model","text":"matrix design model","code":""},{"path":"/reference/model.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Functions related to finding models — iterate_model","text":"search_model: Search right model blocks provided.","code":""},{"path":[]},{"path":"/reference/model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions related to finding models — iterate_model","text":"","code":"data(\"Russett\", package = \"RGCCA\") X_agric <- as.matrix(Russett[, c(\"gini\", \"farm\", \"rent\")]) X_ind <- as.matrix(Russett[, c(\"gnpr\", \"labo\")]) X_polit <- as.matrix(Russett[ , c(\"inst\", \"ecks\",  \"death\", \"demostab\",                                   \"dictator\")]) A <- list(Agric = X_agric, Ind = X_ind, Polit = X_polit) C <- matrix(c(0, 0, 1, 0, 0, 1, 1, 1, 0), 3, 3) out <- search_model(A = A, C = C, c1 =rep(1, 3), scheme = \"factorial\",                scale = FALSE, verbose = FALSE,                ncomp = rep(1, length(A)),                bias = TRUE, BPPARAM = BiocParallel::SerialParam()) head(out) #>        vs12       vs13       vs23 AVE_inner AVE_outer        cc1 var12 var13 #> 1 0.3243244 -0.4429347 -0.7464389 0.1506887 0.6668992 0.07534437   0.5   0.5 #> 2 0.3310923 -0.4468592 -0.7481229 0.1396425 0.6649707 0.15954291   1.0   0.5 #> 3 0.3194449 -0.4400412 -0.7451902 0.1631059 0.6681027 0.21914752   0.5   1.0 #> 4 0.3243244 -0.4429347 -0.7464389 0.1506887 0.6668992 0.30137749   1.0   1.0 #> 5 0.3575118 -0.4485234 -0.7713634 0.3614081 0.6533113 0.18070403   0.5   0.0 #> 6 0.3573044 -0.4483754 -0.7712343 0.2833784 0.6534723 0.27636702   1.0   0.0 #>   var23 weights #> 1   0.0       2 #> 2   0.0       2 #> 3   0.0       2 #> 4   0.0       2 #> 5   0.5       2 #> 6   0.5       2 # From all the models, we select that with the higher inner AVE: model <- extract_model(C, out, \"inner\") # We then look for a variation of the weights of this model out <- iterate_model(A = A, C = model, c1 =rep(1, 3), scheme = \"factorial\",                scale = FALSE, verbose = FALSE,                ncomp = rep(1, length(A)),                bias = TRUE)"},{"path":"/reference/model_RGCCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare metadata data for RGCCA. — model_RGCCA","title":"Prepare metadata data for RGCCA. — model_RGCCA","text":"Prepares factors vectors. level factor converted column, numeric columns left .","code":""},{"path":"/reference/model_RGCCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare metadata data for RGCCA. — model_RGCCA","text":"","code":"model_RGCCA(data, columns, intercept = FALSE)"},{"path":"/reference/model_RGCCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare metadata data for RGCCA. — model_RGCCA","text":"data data.frame information samples columns name columns used build matrix intercept logical value want one column 1 .","code":""},{"path":"/reference/model_RGCCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare metadata data for RGCCA. — model_RGCCA","text":"matrix factor decomposed much columns factors minus 1 numeric values .","code":""},{"path":[]},{"path":"/reference/model_RGCCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare metadata data for RGCCA. — model_RGCCA","text":"","code":"block <- model_RGCCA(iris, c(\"Petal.Width\", \"Species\"))"},{"path":"/reference/scale2.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale2 — scale2","title":"Scale2 — scale2","text":"possible reexport scale2 RGCCA, make available users.","code":""},{"path":"/reference/scale2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale2 — scale2","text":"","code":"scale2(...)"},{"path":"/reference/scale2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale2 — scale2","text":"... Named arguments scale2, (Matrix), center, scale, bias (logical).","code":""},{"path":"/reference/subSymm.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute in a symmetric matrix — subSymm","title":"Substitute in a symmetric matrix — subSymm","text":"Helper create models, substitute symmetric matrix value.","code":""},{"path":"/reference/subSymm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute in a symmetric matrix — subSymm","text":"","code":"subSymm(m, x, y, val)"},{"path":"/reference/subSymm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute in a symmetric matrix — subSymm","text":"m symmetric matrix x Row position y Column position val Value insert given position","code":""},{"path":"/reference/subSymm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute in a symmetric matrix — subSymm","text":"symmetric matrix value inserted right positions","code":""},{"path":[]},{"path":"/reference/subSymm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute in a symmetric matrix — subSymm","text":"","code":"m <- matrix(0, ncol = 3, nrow = 3) subSymm(m, 1, 2, 1) #>      [,1] [,2] [,3] #> [1,]    0    1    0 #> [2,]    1    0    0 #> [3,]    0    0    0"},{"path":"/reference/subsetData.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a list — subsetData","title":"Subset a list — subsetData","text":"Given list index subset element list remove variables constant.","code":""},{"path":"/reference/subsetData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a list — subsetData","text":"","code":"subsetData(A, index)"},{"path":"/reference/subsetData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a list — subsetData","text":"list array samples rows variables columns. index samples keep.","code":""},{"path":"/reference/subsetData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a list — subsetData","text":"list samples.","code":""},{"path":"/reference/subsetData.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Subset a list — subsetData","text":"also removes constant variables data.","code":""},{"path":"/reference/subsetData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a list — subsetData","text":"","code":"data(ge_cgh_locIGR) A <- subsetData(ge_cgh_locIGR$multiblocks, sample(53, replace = TRUE)) str(A) #> List of 3 #>  $ GE : num [1:53, 1:15702] 0.396 0.294 0.626 -0.725 -0.59 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:53] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr [1:15702] \"A_23_P212522\" \"A_32_P30710\" \"A_24_P470079\" \"A_23_P65830\" ... #>  $ CGH: num [1:53, 1:1229] -0.00083 -0.004208 0.000934 0.013745 -0.362121 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:53] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr [1:1229] \"1\" \"3\" \"5\" \"6\" ... #>  $ y  : num [1:53, 1:3] 0 0 0 1 1 1 1 1 1 0 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:53] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr [1:3] \"cort\" \"dipg\" \"midl\""},{"path":"/reference/symm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create symmetric matrix — symm","title":"Create symmetric matrix — symm","text":"Create symmetric matrix","code":""},{"path":"/reference/symm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create symmetric matrix — symm","text":"","code":"symm(m, data)"},{"path":"/reference/symm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create symmetric matrix — symm","text":"m Square numeric matrix. data Numeric values upper triangular side matrix","code":""},{"path":"/reference/symm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create symmetric matrix — symm","text":"square symmetric matrix.","code":""},{"path":"/reference/symm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create symmetric matrix — symm","text":"upper case can values assumed diagonal.","code":""},{"path":[]},{"path":"/reference/symm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create symmetric matrix — symm","text":"","code":"m <- matrix(0, ncol = 5, nrow = 5) symm(m, c(0, 1, 1, 1, 0, 0.5, 0.2, 0.3, 0.7, 0.1)) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  0.0  0.0  1.0  1.0  0.2 #> [2,]  0.0  0.0  1.0  0.0  0.3 #> [3,]  1.0  1.0  0.0  0.5  0.7 #> [4,]  1.0  0.0  0.5  0.0  0.1 #> [5,]  0.2  0.3  0.7  0.1  0.0"},{"path":"/reference/variables_contribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Find variables contributions — variables_contribution","title":"Find variables contributions — variables_contribution","text":"Return specific contribution variable sample first dimension block.","code":""},{"path":"/reference/variables_contribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find variables contributions — variables_contribution","text":"","code":"variables_contribution(A, res, scale = TRUE, bias = TRUE)"},{"path":"/reference/variables_contribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find variables contributions — variables_contribution","text":"original data. res results sgcca() rgcca(). scale Logical value whether scale data. bias Logical value whether use bias scaling data.","code":""},{"path":"/reference/variables_contribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find variables contributions — variables_contribution","text":"list matrices variables block value sample helps place sample reduced-dimensional space.","code":""},{"path":"/reference/variables_contribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find variables contributions — variables_contribution","text":"","code":"if (FALSE) { # Download the dataset's package at http://biodev.cea.fr/sgcca/. # --> gliomaData_0.4.tar.gz  require(gliomaData) data(ge_cgh_locIGR)  A <- ge_cgh_locIGR$multiblocks Loc <- factor(ge_cgh_locIGR$ylabel) levels(Loc) <- colnames(ge_cgh_locIGR$multiblocks$y) C <-  matrix(c(0, 0, 1, 0, 0, 1, 1, 1, 0), 3, 3) tau = c(1, 1, 0)  # rgcca algorithm using the dual formulation for X1 and X2 # and the dual formulation for X3 A[[3]] = A[[3]][, -3] # sgcca algorithm result.sgcca = sgcca(A, C, c1 = c(.071,.2, 1), ncomp = c(1, 1, 1),                      scheme = \"centroid\", verbose = FALSE) weights <- variables_contribution(A, result.sgcca) }"},{"path":"/reference/weight_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create design matrices with different weights — weight_design","title":"Create design matrices with different weights — weight_design","text":"Creates possible matrices given number blocks number weights. Optionally can create just subset based numeric vector.","code":""},{"path":"/reference/weight_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create design matrices with different weights — weight_design","text":"","code":"weight_design(weights = 4, size, diff0 = NULL)"},{"path":"/reference/weight_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create design matrices with different weights — weight_design","text":"weights numeric value number weights used size numeric value number datasets design. diff0 Numeric vector position different 0 lower.tri(). See examples","code":""},{"path":"/reference/weight_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create design matrices with different weights — weight_design","text":"list matrices designs different weights.","code":""},{"path":[]},{"path":"/reference/weight_design.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create design matrices with different weights — weight_design","text":"Flodel: https://codereview.stackexchange.com//203517/36067","code":""},{"path":"/reference/weight_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create design matrices with different weights — weight_design","text":"","code":"out <- weight_design(4, 4) head(out) #> [[1]] #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0    0 #> [2,]    0    0    0    0 #> [3,]    0    0    0    0 #> [4,]    0    0    0    0 #>  #> [[2]] #>           [,1]      [,2] [,3] [,4] #> [1,] 0.0000000 0.3333333    0    0 #> [2,] 0.3333333 0.0000000    0    0 #> [3,] 0.0000000 0.0000000    0    0 #> [4,] 0.0000000 0.0000000    0    0 #>  #> [[3]] #>           [,1]      [,2] [,3] [,4] #> [1,] 0.0000000 0.6666667    0    0 #> [2,] 0.6666667 0.0000000    0    0 #> [3,] 0.0000000 0.0000000    0    0 #> [4,] 0.0000000 0.0000000    0    0 #>  #> [[4]] #>      [,1] [,2] [,3] [,4] #> [1,]    0    1    0    0 #> [2,]    1    0    0    0 #> [3,]    0    0    0    0 #> [4,]    0    0    0    0 #>  #> [[5]] #>           [,1] [,2]      [,3] [,4] #> [1,] 0.0000000    0 0.3333333    0 #> [2,] 0.0000000    0 0.0000000    0 #> [3,] 0.3333333    0 0.0000000    0 #> [4,] 0.0000000    0 0.0000000    0 #>  #> [[6]] #>           [,1]      [,2]      [,3] [,4] #> [1,] 0.0000000 0.3333333 0.3333333    0 #> [2,] 0.3333333 0.0000000 0.0000000    0 #> [3,] 0.3333333 0.0000000 0.0000000    0 #> [4,] 0.0000000 0.0000000 0.0000000    0 #>  # Using previously defined matrix C <- diag(4) diag(C) <- 0 C <- subSymm(C, 1, 2, 0.456) C <- subSymm(C, 2, 3, runif(1)) C <- subSymm(C, 1, 3, runif(1)) C <- subSymm(C, 3, 4, runif(1)) # Explore matrices which are similar to C d <- weight_design(weights = 11, size = 4, which(lower.tri(C) & C != 0)) head(d) #> [[1]] #>      [,1] [,2] [,3] [,4] #> [1,]  0.0  0.1  0.1  0.0 #> [2,]  0.1  0.0  0.1  0.0 #> [3,]  0.1  0.1  0.0  0.1 #> [4,]  0.0  0.0  0.1  0.0 #>  #> [[2]] #>      [,1] [,2] [,3] [,4] #> [1,]  0.0  0.2  0.1  0.0 #> [2,]  0.2  0.0  0.1  0.0 #> [3,]  0.1  0.1  0.0  0.1 #> [4,]  0.0  0.0  0.1  0.0 #>  #> [[3]] #>      [,1] [,2] [,3] [,4] #> [1,]  0.0  0.3  0.1  0.0 #> [2,]  0.3  0.0  0.1  0.0 #> [3,]  0.1  0.1  0.0  0.1 #> [4,]  0.0  0.0  0.1  0.0 #>  #> [[4]] #>      [,1] [,2] [,3] [,4] #> [1,]  0.0  0.4  0.1  0.0 #> [2,]  0.4  0.0  0.1  0.0 #> [3,]  0.1  0.1  0.0  0.1 #> [4,]  0.0  0.0  0.1  0.0 #>  #> [[5]] #>      [,1] [,2] [,3] [,4] #> [1,]  0.0  0.5  0.1  0.0 #> [2,]  0.5  0.0  0.1  0.0 #> [3,]  0.1  0.1  0.0  0.1 #> [4,]  0.0  0.0  0.1  0.0 #>  #> [[6]] #>      [,1] [,2] [,3] [,4] #> [1,]  0.0  0.6  0.1  0.0 #> [2,]  0.6  0.0  0.1  0.0 #> [3,]  0.1  0.1  0.0  0.1 #> [4,]  0.0  0.0  0.1  0.0 #>"},{"path":"/news/index.html","id":"intermodel-development-version","dir":"Changelog","previous_headings":"","what":"inteRmodel (development version)","title":"inteRmodel (development version)","text":"Added support upcoming RGCCA 3.0 Added NEWS.md file track changes package.","code":""}]
